@page "/Addition"
@inject IHttpClientFactory _clientFactory

<div class="container">
    <div class="row">
        <div class="col-sm">
            <h3>Addition</h3>
        </div>
    </div>
    <div class="row">
        <div class="col-sm" style="padding-bottom: 2rem;">
            <EditForm class="form-inline my-2" Model="@Addends" OnValidSubmit="OperationAsync">
                <InputText class="form-control mx-2" @bind-Value="Addends.addends" @attributes="inputAttributes" />
                <button class="btn btn-outline-primary" type="submit">=</button>
                <label class="form-control mx-2" AutoSize="true">@display</label>
            </EditForm>
            @if (!String.IsNullOrWhiteSpace(errorMessage))
            {
            <p>
                <div class="alert alert-danger">
                    @errorMessage
                </div>
            </p>
            }
        </div>
    </div>
</div>

@code {

    [Parameter]
    public Dictionary<string, object> inputAttributes { get; set; } =
    new Dictionary<string, object>()
    {
            { "required", "required" },
            { "placeholder", "3+3+2" },
            { "style", "width:10em" }
    };

    private class AddendsLine
    {
        public string addends { get; set; }
    };
    private AddendsLine Addends = new AddendsLine();
    private AdditionModel newAddModel = new AdditionModel();

    private string errorMessage; //Additional info message
    private string display;

    private async Task OperationAsync()
    {
        try
        {
            errorMessage = "";
            display = "";

            newAddModel.Addends = Array.ConvertAll(Addends.addends.Split('+'), int.Parse);

            var client = _clientFactory.CreateClient("Calculator");
            client.BaseAddress = new Uri(Startup.BaseAddress);

            var resultOperation = await PagesCommon.ExecuteOperation(newAddModel, client);
            if (resultOperation is AdditionResultModel)
            {
                var resultModel = (AdditionResultModel)resultOperation;
                display = resultModel.Sum.ToString();
            }
            else
            {
                //Calculator style "message on display"
                var errorResponseModel = (ErrorResponseModel)resultOperation;
                display = errorResponseModel.ErrorCode;
                errorMessage = errorResponseModel.ErrorMessage;
            }
        }
        catch (FormatException)
        {
            errorMessage = "Invalid input (hint: <integer number>+<integer number>+...+<integer number>)";
        }
        catch (OverflowException)
        {
            display = "Overflow";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }
}
